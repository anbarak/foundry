#!/usr/bin/env bash
set -euo pipefail

SKIP_WHISPER=false
SKIP_SHOTTR=false
GENERATE_CHECKSUMS=false

# --------------------------------------------------------------------
# Parse CLI flags
# --------------------------------------------------------------------
for arg in "$@"; do
  case "$arg" in
    --skip-whisper)        SKIP_WHISPER=true ;;
    --skip-shottr)         SKIP_SHOTTR=true ;;
    --generate-checksums)  GENERATE_CHECKSUMS=true ;;
    *) echo "‚ùå Unknown flag: $arg" && exit 1 ;;
  esac
done

# --------------------------------------------------------------------
# Setup whisper.cpp models
# --------------------------------------------------------------------
if [ "$SKIP_WHISPER" = false ]; then
  echo "üß† Setting up Whisper.cpp models..."

  WHISPER_MODEL_MANIFEST="$HOME/.config/whisper/models.txt"
  WHISPER_MODEL_CHECKSUMS="$HOME/.config/whisper/models.sha256"
  WHISPER_MODEL_DIR="$HOME/.local/share/whisper/models"
  mkdir -p "$WHISPER_MODEL_DIR"

  if [[ ! -f "$WHISPER_MODEL_MANIFEST" ]]; then
    echo "‚ùå Whisper model manifest not found at $WHISPER_MODEL_MANIFEST"
    echo "üìñ Please create one with model filenames (one per line)"
    exit 1
  fi

  mapfile -t WHISPER_MODELS < <(grep -v '^\s*#' "$WHISPER_MODEL_MANIFEST")

  for MODEL in "${WHISPER_MODELS[@]}"; do
    MODEL_PATH="$WHISPER_MODEL_DIR/$MODEL"

    if [[ ! -f "$MODEL_PATH" ]]; then
      echo "‚¨áÔ∏è  Downloading $MODEL..."
      curl -Ls -o "$MODEL_PATH" "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/$MODEL"
    else
      echo "‚úÖ $MODEL already exists."
    fi

    if [[ -f "$WHISPER_MODEL_CHECKSUMS" ]]; then
      EXPECTED_HASH=$(grep "  $MODEL\$" "$WHISPER_MODEL_CHECKSUMS" | cut -d ' ' -f1 || true)
      if [[ -n "$EXPECTED_HASH" ]]; then
        ACTUAL_HASH=$(shasum -a 256 "$MODEL_PATH" | cut -d ' ' -f1)
        if [[ "$EXPECTED_HASH" != "$ACTUAL_HASH" ]]; then
          echo "‚ùå Checksum mismatch for $MODEL"
          echo "Expected: $EXPECTED_HASH"
          echo "Actual:   $ACTUAL_HASH"
          exit 1
        else
          echo "üîí SHA256 verified for $MODEL"
        fi
      fi
    fi
  done

  if [[ "$GENERATE_CHECKSUMS" = true ]]; then
    echo "üßæ Generating checksums..."
    > "$WHISPER_MODEL_CHECKSUMS"
    for MODEL in "${WHISPER_MODELS[@]}"; do
      MODEL_PATH="$WHISPER_MODEL_DIR/$MODEL"
      if [[ -f "$MODEL_PATH" ]]; then
        shasum -a 256 "$MODEL_PATH" >> "$WHISPER_MODEL_CHECKSUMS"
      fi
    done
    echo "‚úÖ Checksums written to $WHISPER_MODEL_CHECKSUMS"
  fi

  echo "‚úÖ Whisper.cpp setup complete."
else
  echo "‚è≠Ô∏è  Skipping Whisper.cpp setup (--skip-whisper)"
fi

# --------------------------------------------------------------------
# Setup Shottr (screenshot tool)
# --------------------------------------------------------------------
if [ "$SKIP_SHOTTR" = false ]; then
  echo "üì∏ Setting up Shottr..."

  if ! brew list --cask -1 | grep -qx shottr; then
    echo "üì¶ Installing Shottr..."
    brew install --cask shottr
  else
    echo "‚úÖ Shottr already installed."
  fi

  SHOTTR_CONFIG_SRC="$HOME/.config/shottr/cc.ffitch.shottr.plist"
  SHOTTR_CONFIG_DEST="$HOME/Library/Containers/cc.ffitch.shottr/Data/Library/Preferences/cc.ffitch.shottr.plist"

  if [[ -f "$SHOTTR_CONFIG_SRC" ]]; then
    if [[ -d "$(dirname "$SHOTTR_CONFIG_DEST")" ]]; then
      echo "‚ôªÔ∏è  Restoring Shottr preferences..."
      cp "$SHOTTR_CONFIG_SRC" "$SHOTTR_CONFIG_DEST"
      killall cfprefsd &>/dev/null || echo "‚ÑπÔ∏è  Could not kill cfprefsd ‚Äî it may not be running."
      echo "‚úÖ Shottr preferences restored."
    else
      echo "‚ö†Ô∏è  Shottr must be launched at least once before restoring preferences."
    fi
  else
    printf "‚ö†Ô∏è  Shottr preferences not found at:\n  %s\nüìñ To configure manually, see:\n  %s\n" \
      "$SHOTTR_CONFIG_SRC" "$HOME/.config/shottr/shottr-config.md"
  fi

  echo "‚úÖ Shottr setup complete."
else
  echo "‚è≠Ô∏è  Skipping Shottr setup (--skip-shottr)"
fi

# --------------------------------------------------------------------
# Setup CLI tools via pipx/npm
# --------------------------------------------------------------------
echo "üß∞ Running CLI tool installer script..."
"$HOME/bin/tools/setup/setup-cli-tools.sh"
