#!/usr/bin/env bash
set -euo pipefail

echo "⚙️ Initializing dev machine..."

# -----------------------------------------------------------------------------
# Install Homebrew and core CLI tools via Brewfile.
# Setup weekly homebrew maintenance (LaunchAgent)
# -----------------------------------------------------------------------------
if ! command -v brew &>/dev/null; then
  echo "🛠️ Homebrew not found — installing..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
  echo "🍺 Homebrew already installed."
fi

echo "📦 Updating Homebrew packages via maintain-homebrew.sh..."
"$HOME/bin/tools/system/install-brew-maintenance.sh"

# -----------------------------------------------------------------------------
# Create dotfiles structure
# -----------------------------------------------------------------------------
echo "📁 Setting up dotfiles structure..."
[ -f "$HOME/.zshrc.local" ] || touch "$HOME/.zshrc.local"
mkdir -p "$HOME/.config/zsh/modules"
mkdir -p "$HOME/bin"

if [[ ! -L "$HOME/bin/ycommit" ]]; then
  echo "🔗 Linking ycommit command..."
  ln -sf "$HOME/bin/git/yadm-commit" "$HOME/bin/ycommit"
fi

if [[ ! -L "$HOME/bin/open-kdbx" ]]; then
  echo "🔗 Linking open-kdbx command..."
  ln -sf "$HOME/bin/tools/kdbx/open-kdbx.sh" "$HOME/bin/open-kdbx"
fi

# -----------------------------------------------------------------------------
# Create code directory structure
# -----------------------------------------------------------------------------
echo "📁 Creating code folders (cf, my, tmp)..."
mkdir -p "$HOME/code/cf" "$HOME/code/my" "$HOME/code/tmp"

# -----------------------------------------------------------------------------
# Modular setup scripts (cloud/dev tools)
# -----------------------------------------------------------------------------
SCRIPTS=(
  "$HOME/bin/bootstrap/setup-core-tools"
  "$HOME/bin/bootstrap/setup-terraform-tools"
  "$HOME/bin/bootstrap/setup-kubernetes-tools"
  "$HOME/bin/bootstrap/setup-cloud-core"
)

for script in "${SCRIPTS[@]}"; do
  if [[ -x "$script" ]]; then
    echo "➡️  Running $(basename "$script")..."
    "$script"
  else
    echo "⚠️ Skipping missing or non-executable: $script"
  fi
done

# -----------------------------------------------------------------------------
# Setup secrets backup (LaunchAgent)
# -----------------------------------------------------------------------------
SECRETS_BACKUP_INSTALLER="$HOME/bin/tools/system/install-secrets-backup.sh"
if [[ -x "$SECRETS_BACKUP_INSTALLER" ]]; then
  "$SECRETS_BACKUP_INSTALLER"
else
  echo "⚠️  Skipping secrets backup LaunchAgent — script not found or not executable"
fi

# -----------------------------------------------------------------------------
# Step X: Install librespeed-cli (speed test utility)
# -----------------------------------------------------------------------------
echo "📡 Installing librespeed-cli..."
if [[ ! -x "$HOME/.local/bin/tools/librespeed-cli" ]]; then
  "$HOME/bin/tools/system/setup-librespeed.sh"
fi

# ------------------------------------------------------------------------
# Install weekly restart reminder (LaunchAgent)
# ------------------------------------------------------------------------
echo "⏰ Installing restart reminder LaunchAgent..."

RESTART_INSTALLER="$HOME/bin/tools/system/install-restart-reminder.sh"
if [[ -x "$RESTART_INSTALLER" ]]; then
  "$RESTART_INSTALLER"
else
  echo "⚠️ Skipping restart reminder install — script not found or not executable: $RESTART_INSTALLER"
fi

# ------------------------------------------------------------------------------
# Secure credentials setup (interactive, one-time per machine)
# ------------------------------------------------------------------------------
echo "🔐 Checking for Bitwarden master password in Keychain..."

if ! security find-generic-password -s bitwarden -a master-password -w &>/dev/null; then
  echo "⚠️ Bitwarden master password not found in Keychain."
  echo "👉 Running setup to save it now..."
  "$HOME/bin/tools/setup/save-bitwarden-master-password-to-keychain.sh"
else
  echo "✅ Bitwarden master password is already in Keychain."
fi

# --------------------------------------------------------------------
# Restore internal /etc/hosts mappings (e.g., Jenkins agents)
# --------------------------------------------------------------------
echo "📎 Applying custom hosts block to /etc/hosts..."
"$HOME/bin/tools/system/apply-hosts-block.sh" || echo "⚠️ Failed to apply /etc/hosts block"

# ------------------------------------------------------------------------------
# Set up permissions and test secrets-related tools
# ------------------------------------------------------------------------------
echo "🔐 Validating secrets and ssh audit tooling..."

mkdir -p "$HOME/bin/tools/ssh"
mkdir -p "$HOME/bin/tools/backup"

chmod +x "$HOME/bin/tools/ssh/lint-config.sh" \
         "$HOME/bin/tools/ssh/audit-keys.sh" \
         "$HOME/bin/tools/backup/check-bitwarden.sh" 2>/dev/null || true

# ------------------------------------------------------------------------------
# Optional: Set system DNS to public resolvers (Cloudflare + Google)
# ------------------------------------------------------------------------------
read -rp "🌐 Set DNS to Cloudflare (1.1.1.1) + Google (8.8.8.8)? [y/N] " dns_choice
if [[ "$dns_choice" =~ ^[Yy]$ ]]; then
  "$FOUNDROOT/tools/networking/set-dns-public.sh"
else
  echo "❎ Skipping DNS configuration."
fi

# Run validation scripts
"$HOME/bin/tools/ssh/lint-config.sh" || echo "⚠️ SSH config lint failed"
"$HOME/bin/tools/ssh/audit-keys.sh" || echo "⚠️ SSH key audit failed"
"$HOME/bin/tools/backup/check-bitwarden.sh" || echo "⚠️ Bitwarden CLI session check failed"

echo "✅ Bootstrap complete."
echo "💡 Tip: Run 'exec zsh' or restart terminal to apply shell changes."
echo "🧪 Tip: Run '~/bin/lint-dotfiles.sh' to validate dotfiles."
