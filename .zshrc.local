###################################################################################
# This is a recommended file to store your own customizations and plugin          #
# management. It helps keep your main ~/.zshrc file clean. You can source         #
# this file from your ~/.zshrc to activate the settings within.                   #
###################################################################################

# Ensure ~/.config/homebrew/Brewfile is updated every time you install/uninstall something
brew() {
  command brew "$@"
  if [[ "$1" == "install" || "$1" == "upgrade" || "$1" == "uninstall" ]]; then
    echo "üì¶ Updating Brewfile..."
    brew bundle dump --file="$HOME/.config/homebrew/Brewfile" --force

    echo "üîç Checking for Brewfile diff..."
    if ! yadm diff --quiet "$HOME/.config/homebrew/Brewfile"; then
      echo "üö´ Saving staged changes (if any)..."
      STAGED=$(yadm diff --cached --name-only | grep -v 'Brewfile' || true)
      for file in $STAGED; do
        yadm reset HEAD "$file"
      done

      echo "‚ûï Adding Brewfile..."
      yadm add "$HOME/.config/homebrew/Brewfile"

      echo "‚úÖ Committing Brewfile..."
      yadm commit -m "üì¶ Updated Brewfile" --no-gpg-sign || echo "‚ö†Ô∏è Commit skipped"

      echo "üöÄ Pushing..."
      yadm push || echo "‚ö†Ô∏è Push skipped"

      echo "üîÅ Re-staging previous files..."
      for file in $STAGED; do
        yadm add "$file"
      done
    else
      echo "‚úÖ No changes in Brewfile."
    fi
  fi
}

export GPG_TTY=$(tty)

# Source modular aliases from ~/.config/zsh/modules
ZSH_MODULES="$HOME/.config/zsh/modules"
if [[ -d "$ZSH_MODULES" ]]; then
  for module in "$ZSH_MODULES"/*.zsh; do
    source "$module"
  done
fi

# Load persisted default model if available
[[ -f ~/.config/ollama/default-model ]] && export OLLAMA_DEFAULT_MODEL="$(< ~/.config/ollama/default-model)"

# Enable vi keybindings only if not already set
[[ ${KEYMAP} != vicmd ]] && bindkey -v

# Enable bash completion for zsh
autoload bashcompinit
bashcompinit

# MySQL autocompletion
if [[ -z "$MYSQL_AUTOCOMPLETE_SOURCED" ]]; then
  # Dynamically find the latest version-specific path
  MYSQL_AUTOCOMPLETE_SOURCED=1
  latest_mysql_autocomplete=$(find "$(brew --prefix)/Cellar/mysql" -name "mysql_autocomplete" 2>/dev/null | sort | tail -n 1)
  if [ -f "$latest_mysql_autocomplete" ]; then
    source "$latest_mysql_autocomplete"
  fi
fi

# Prevent OMZ from modifying completion files and ensure completion system is initialized
DISABLE_COMPFIX=true
mkdir -p "$HOME/.zsh/completions"
fpath+="$HOME/.zsh/completions"
autoload -Uz compinit
compinit

# Environment variables (optional)
# Add environment variables specific to your zsh environment here
# (Consider using separate files for system-wide environment variables)
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

# =============================================================================
# Foundry Environment Setup
# =============================================================================
# Loads optional feature flags and environment variables for Foundry dev platform.
# Controlled via ~/.foundry/.foundryrc (tracked in yadm)
export FOUNDRY_HOME="$HOME/.foundry"
[[ -f "$FOUNDRY_HOME/.foundryrc" ]] && source "$FOUNDRY_HOME/.foundryrc"

# Function to check for Oh My Zsh updates and prompt user
check_omz_update() {
    echo "Checking for Oh My Zsh updates..."
    if omz update | grep -q 'updated successfully'; then
        echo "Oh My Zsh updates are available. Would you like to update? (y/n)"
        read answer
        if [[ $answer == 'y' ]]; then
            omz update
        else
            echo "Update skipped."
        fi
    else
        echo "Oh My Zsh is already up to date."
    fi
}

# Set the terminal title to show the user, hostname, and current directory
function set_terminal_title() {
  case $TERM in
    xterm*|rxvt*)
      # For tmux sessions
      if [ -n "$TMUX" ]; then
        local TMUX_INFO="#[fg=yellow]#S #[fg=cyan]#W"
      fi
      # Set the title
      print -Pn "\e]2;%n@%m: %~ $TMUX_INFO\a"
      ;;
  esac
}

# Apply default apps via duti on first login or setup only
if [[ ! -f "$HOME/.config/.defaults-set" && -x "$HOME/bin/tools/system/set-defaults.sh" ]]; then
  "$HOME/bin/tools/system/set-defaults.sh"
  touch "$HOME/.config/.defaults-set"
fi

# Call the function before each prompt
precmd_functions+=set_terminal_title

# Alias to trigger update check
alias checkupdates='check_omz_update'

# Docker
export DOCKER_DEFAULT_PLATFORM=linux/amd64

# Go
export GOPATH=$HOME/go
export GOROOT=$(brew --prefix golang)/libexec
export PATH=$PATH:$GOPATH/bin:$GOROOT/bin

# Python
if [[ ":$PYTHONPATH:" != *":$HOME/code/cf/my/insurance-services-utils/scripts:"* ]]; then
    export PYTHONPATH=$PYTHONPATH:"$HOME/code/cf/my/insurance-services-utils/scripts"
fi

# Add Google Cloud SDK to PATH
if [[ -f "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ]]; then
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
fi

# Enable shell command completion for gcloud
if [[ -f "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ]]; then
  source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi

# Add Krew to PATH
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Source k plugin
if [[ -f "$ZSH/custom/plugins/k/k.sh" ]]; then
  source "$ZSH/custom/plugins/k/k.sh"
fi

# Load cloud profiles and configurations
if [[ -f "$HOME/.config/clouds/load_all.sh" ]]; then
  source "$HOME/.config/clouds/load_all.sh" centerfield
fi

# Plugin management (using plugin array)
if [[ -f "$HOME/.zshrc.plugins" ]]; then
  source "$HOME/.zshrc.plugins"
fi

# Add asdf to shell configuration
if [[ -f "$(brew --prefix)/libexe/asdf.sh" ]]; then
  source "$(brew --prefix)/libexe/asdf.sh"
fi

# Automatically load BW_SESSION if cached
if [[ -z "$BW_SESSION" && -f "$HOME/.cache/bw-session" ]]; then
  export BW_SESSION=$(< "$HOME/.cache/bw-session")
fi

eval "$(direnv hook zsh)"

# Default editors for Git, Yadm, and general shell use
export EDITOR=vim
export VISUAL=vim

# Prevent history dups and blanks
setopt HIST_IGNORE_DUPS       # Don‚Äôt record duplicates
setopt HIST_IGNORE_ALL_DUPS   # Remove all previous dupes of a new command
setopt HIST_FIND_NO_DUPS      # Skip dupes in history search
setopt HIST_REDUCE_BLANKS     # Remove extra spaces between words

precmd_functions+=(refresh_aws_sso)

# Enable auto-wake on Mondays before the secrets-backup LaunchAgent runs
# CF_ENABLE_BACKUP_WAKE=1 ‚Üí tells the installer script to program pmset
# CF_BACKUP_WAKE_TIME="09:58:00" ‚Üí system wake time (2 minutes before 10:00 job)
export CF_ENABLE_BACKUP_WAKE=1
export CF_BACKUP_WAKE_TIME="09:58:00"
